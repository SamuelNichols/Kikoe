import { supabase } from "./supabaseClient";
import type { FetchSubsRequestBody, RawCaptions } from "../../supabase/functions/fetch-subs/index.ts";

// --- types ---------------------------------------------------------------

export type Caption = {
  start: number;
  duration: number;
  text: string;
}
export type Captions = Caption[]
export type CaptionsMap = {
  [key: string]: Captions;
}

// Language type as a union of string literals
export type Language = "ja" | "en";

// --- utils ---------------------------------------------------------------

// <?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript><text start=\"0.16\" dur=\"4.97\">お、何ですか?これは卵ちのプチプチお見せちまち動様のまま</text>
const convertXMLToCaptions = (xml: string): Captions => {
  const parser = new DOMParser();
  const doc = parser.parseFromString(xml, "application/xml");
  const subtitles = doc.getElementsByTagName("text");
  return Array.from(subtitles).map(val => {
    const start = parseFloat(val.getAttribute("start") || "0");
    const duration = parseFloat(val.getAttribute("dur") || "0");
    const text = val.textContent || "";
    return { start, duration, text };
  });
}

const getCaptionByLanguage = (captions: CaptionsMap, language: Language) => {
  // get all items in map that the key ends with ::Language (ie autoGenerated::ja or autoGenerated::en)
  const keys = Object.keys(captions).filter(key => {
    return key.endsWith(`::ja`);
  });
  // return a dictionary of keys and values
  return keys.map(key => ({
    key,
    value: captions[key],
  }));
}

// --- functions ---------------------------------------------------------------

export async function getCaptions(videoId: string, language: Language) {
  const body: FetchSubsRequestBody = { videoId };
  let { data, error } = await supabase.functions.invoke("fetch-subs", {
    body,
  });

  if (error) {
    throw error;
  }

  const captions = data as RawCaptions;
  const captionsMap = Object.entries(captions).reduce((acc, [key, value]) => ({
    ...acc,
    [key]: convertXMLToCaptions(value),
  }), {} as CaptionsMap);

  return getCaptionByLanguage(captionsMap, language);
}
